// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module bitreversal_control_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
  input clk_i,
  input rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output bitreversal_control_reg_pkg::bitreversal_control_reg2hw_t reg2hw, // Write
  input  bitreversal_control_reg_pkg::bitreversal_control_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import bitreversal_control_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  /* verilator lint_off WIDTH */
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] din_qs;
  logic [31:0] din_wd;
  logic din_we;
  logic start_qs;
  logic start_wd;
  logic start_we;
  logic read_qs;
  logic read_wd;
  logic read_we;
  logic write_qs;
  logic write_wd;
  logic write_we;
  logic done_qs;
  logic done_wd;
  logic done_we;
  logic [31:0] dout_qs;

  // Register instances
  // R[din]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_din (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (din_we),
    .wd     (din_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.din.q ),

    // to register interface (read)
    .qs     (din_qs)
  );


  // R[start]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_start (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (start_we),
    .wd     (start_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.start.q ),

    // to register interface (read)
    .qs     (start_qs)
  );


  // R[read]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_read (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (read_we),
    .wd     (read_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.read.q ),

    // to register interface (read)
    .qs     (read_qs)
  );


  // R[write]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_write (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (write_we),
    .wd     (write_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.write.q ),

    // to register interface (read)
    .qs     (write_qs)
  );


  // R[done]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("W1C"),
    .RESVAL  (1'h0)
  ) u_done (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (done_we),
    .wd     (done_wd),

    // from internal hardware
    .de     (hw2reg.done.de),
    .d      (hw2reg.done.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (done_qs)
  );


  // R[dout]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RO"),
    .RESVAL  (32'h0)
  ) u_dout (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.dout.de),
    .d      (hw2reg.dout.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (dout_qs)
  );




  logic [5:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == BITREVERSAL_CONTROL_DIN_OFFSET);
    addr_hit[1] = (reg_addr == BITREVERSAL_CONTROL_START_OFFSET);
    addr_hit[2] = (reg_addr == BITREVERSAL_CONTROL_READ_OFFSET);
    addr_hit[3] = (reg_addr == BITREVERSAL_CONTROL_WRITE_OFFSET);
    addr_hit[4] = (reg_addr == BITREVERSAL_CONTROL_DONE_OFFSET);
    addr_hit[5] = (reg_addr == BITREVERSAL_CONTROL_DOUT_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(BITREVERSAL_CONTROL_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(BITREVERSAL_CONTROL_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(BITREVERSAL_CONTROL_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(BITREVERSAL_CONTROL_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(BITREVERSAL_CONTROL_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(BITREVERSAL_CONTROL_PERMIT[5] & ~reg_be)))));
  end

  assign din_we = addr_hit[0] & reg_we & !reg_error;
  assign din_wd = reg_wdata[31:0];

  assign start_we = addr_hit[1] & reg_we & !reg_error;
  assign start_wd = reg_wdata[0];

  assign read_we = addr_hit[2] & reg_we & !reg_error;
  assign read_wd = reg_wdata[0];

  assign write_we = addr_hit[3] & reg_we & !reg_error;
  assign write_wd = reg_wdata[0];

  assign done_we = addr_hit[4] & reg_we & !reg_error;
  assign done_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = din_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = start_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = read_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = write_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = done_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = dout_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
